#!KAMAILIO

log_level=3
log_stderror=yes

#!define HSS_HOST "hss.mnc001.mcc001.3gppnetwork.org"
#!define HSS_REALM "epc.mnc001.mcc001.3gppnetwork.org"
#!define IMS_REALM "ims.mnc001.mcc001.3gppnetwork.org"
#!define PCSCF_FQDN "pcscf.mnc001.mcc001.3gppnetwork.org"
#!define ICSCF_URI "sip:icscf.mnc001.mcc001.3gppnetwork.org:5060"

children=4

mpath="/usr/local/lib/kamailio/modules/"

loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "sdpops.so"
loadmodule "xlog.so"
loadmodule "pike.so"
loadmodule "cdp.so"
loadmodule "cdp_avp.so"
loadmodule "ims_auth.so"
loadmodule "ims_registrar_pcscf.so"
loadmodule "ims_usrloc_pcscf.so"

modparam("tm", "fr_timer", 3000)
modparam("tm", "fr_inv_timer", 90000)
modparam("tm", "restart_fr_on_each_reply", 1)
modparam("tm", "onreply_avp_mode", 1)

modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 50)
modparam("pike", "remove_latency", 30)

modparam("rr", "append_fromtag", 1)

modparam("cdp", "config_file", "/usr/local/etc/kamailio/ims/diameter.xml")


modparam("ims_registrar_pcscf", "realm", IMS_REALM)
modparam("ims_registrar_pcscf", "default_expires", 600)
modparam("ims_registrar_pcscf", "min_expires", 90)
modparam("ims_registrar_pcscf", "contact_has_prio", 1)
modparam("ims_registrar_pcscf", "path_support", 1)

modparam("ims_usrloc_pcscf", "hash_size", 512)
modparam("ims_usrloc_pcscf", "contact_expiration", 0)

request_route {
    xlog("L_INFO", "[$ci] P-CSCF received $rm from $fu to $ru\n");

    if (!mf_process_maxfwd(10)) {
        sl_send_reply("483", "Too Many Hops");
        exit;
    }

    if (pike_check_req()) {
        xlog("L_WARN", "[$ci] Pike blocking request from $si\n");
        sl_send_reply("429", "Too Many Requests");
        exit;
    }

    if (is_method("REGISTER")) {
        route(REGISTER);
        exit;
    }

    if (is_method("CANCEL")) {
        route(RELAY);
        exit;
    }

    if (loose_route()) {
        route(RELAY);
        exit;
    }

    if (is_method("INVITE|SUBSCRIBE|NOTIFY|MESSAGE|UPDATE|PRACK|OPTIONS")) {
        route(INITIAL_REQUEST);
        exit;
    }

    sl_send_reply("405", "Method Not Allowed");
    exit;
}

route[REGISTER] {
    if (!pcscf_save_pending("location")) {
        sl_reply_error();
        exit;
    }

    t_on_reply("REGISTER_REPLY");
    route(SEND_TO_ICSCF);
    exit;
}

route[INITIAL_REQUEST] {
    if (!pcscf_is_registered("location")) {
        xlog("L_ERR", "[$ci] No active registration for $ru\n");
        sl_send_reply("403", "Not Registered");
        exit;
    }

    if (!is_method("ACK")) {
        record_route();
        t_on_reply("FORWARD_REPLY");
    }

    route(SEND_TO_ICSCF);
    exit;
}

route[RELAY] {
    if (!t_is_set("failure")) {
        t_on_failure("FAILURE");
    }

    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

failure_route[FAILURE] {
    if (t_is_canceled()) {
        exit;
    }
    xlog("L_ERR", "[$ci] Transaction failed with code $T_reply_code\n");
}

route[SEND_TO_ICSCF] {
    if ($du != ICSCF_URI) {
        $du = ICSCF_URI;
    }

    if (!t_is_set("failure")) {
        t_on_failure("FAILURE");
    }

    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

onreply_route[REGISTER_REPLY] {
    if (!t_check_status("200")) {
        return;
    }

    if (!pcscf_save("location")) {
        xlog("L_ERR", "[$ci] Failed to persist registration for $fu\n");
    }
}

onreply_route[FORWARD_REPLY] {
    # Currently just a placeholder for tracing, can add logic later if needed.
    return;
}
