#!KAMAILIO

log_level=3
log_stderror=yes

#!define HSS_HOST "hss.mnc001.mcc001.3gppnetwork.org"
#!define HSS_REALM "epc.mnc001.mcc001.3gppnetwork.org"
#!define IMS_REALM "ims.mnc001.mcc001.3gppnetwork.org"
#!define SCSCF_FQDN "scscf.mnc001.mcc001.3gppnetwork.org"

children=4

mpath="/usr/local/lib/kamailio/modules/"

loadmodule "sl.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "sdpops.so"
loadmodule "xlog.so"
loadmodule "cdp.so"
loadmodule "cdp_avp.so"
loadmodule "ims_auth.so"
loadmodule "ims_registrar_scscf.so"
loadmodule "ims_usrloc_scscf.so"

modparam("tm", "fr_timer", 3000)
modparam("tm", "fr_inv_timer", 90000)
modparam("tm", "restart_fr_on_each_reply", 1)
modparam("tm", "onreply_avp_mode", 1)

modparam("rr", "enable_full_lr", 1)
modparam("rr", "append_fromtag", 1)

modparam("cdp", "config_file", "/usr/local/etc/kamailio/ims/diameter.xml")


modparam("ims_registrar_scscf", "realm", IMS_REALM)
modparam("ims_registrar_scscf", "default_expires", 600)
modparam("ims_registrar_scscf", "min_expires", 90)
modparam("ims_registrar_scscf", "contact_has_prio", 1)
modparam("ims_registrar_scscf", "path_support", 1)

modparam("ims_usrloc_scscf", "hash_size", 1024)
modparam("ims_usrloc_scscf", "contact_expiration", 0)

request_route {
    xlog("L_INFO", "[$ci] S-CSCF received $rm from $fu to $ru\n");

    if (!mf_process_maxfwd(10)) {
        sl_send_reply("483", "Too Many Hops");
        exit;
    }

    if (is_method("REGISTER")) {
        route(SCSCF_REGISTER);
        exit;
    }

    if (is_method("INVITE|SUBSCRIBE|NOTIFY|MESSAGE|UPDATE|PRACK|OPTIONS")) {
        route(SCSCF_HANDLE);
        exit;
    }

    if (is_method("BYE|ACK|CANCEL")) {
        route(RELAY);
        exit;
    }

    sl_send_reply("405", "Method Not Allowed");
    exit;
}

route[SCSCF_REGISTER] {
    if (!ims_authenticate("orig")) {
        sl_send_reply("401", "IMS Authentication Failed");
        exit;
    }

    if (!scscf_save("location", "0x04")) {
        sl_reply_error();
        exit;
    }

    sl_send_reply("200", "Registered");
    exit;
}

route[SCSCF_HANDLE] {
    if (!scscf_lookup("location")) {
        sl_send_reply("404", "Not Found");
        exit;
    }

    route(RELAY);
    exit;
}

route[RELAY] {
    if (!t_is_set("failure")) {
        t_on_failure("FAILURE");
    }

    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

failure_route[FAILURE] {
    if (t_is_canceled()) {
        exit;
    }
    xlog("L_ERR", "[$ci] Transaction failed with code $T_reply_code\n");
}
